(ns tiltontec.example.physics-sim-std
  "Faithful port of https://docs.flutter.dev/cookbook/animation/physics-simulation#interactive-example"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/physics.dart" :as p]
    [tiltontec.matrix.base :refer [dprn]]
    [cljd.flutter.alpha :as f]))

;; cgrand's notes: still a relative straight port, however I chose to differ from
;; the Dart code for the handling of the _animation field.
;; Dart code uses a single listener which has a ref to a late mutable field.
;; The invariants between the value of this field, the controller and
;; the gesture detector was implicit.
;; I preferred to create a new listener at each PanEnd which closes over the animation.

(defn draggable-card [& {:keys [child]}]
  (f/widget
    :inherit [m/MediaQuery]
    :context ctx
    :ticker tick
    :with [controller (m/AnimationController :vsync tick)]
    :state [drag-alignment m.Alignment/center]
    (let [size (.size media-query)
          run-animation
          (fn [^m/Offset px-per-s]
             (let [animation (.drive controller
                              (m/AlignmentTween
                                :begin @drag-alignment
                                :end m.Alignment/center))
                  _ (dprn :boom-ani-std animation (dart/is? animation m/Animation))
                  _ (dprn :early-ani-val!!!!!!!! (.value animation))
                  units-per-s-x (/ (.dx px-per-s) (.width size))
                  units-per-s-y (/ (.dy px-per-s) (.height size))
                  units-per-s (m/Offset units-per-s-x units-per-s-y)
                  unit-velocity (.distance units-per-s)
                  spring ^:const (p/SpringDescription
                                   :mass 30
                                   :stiffness 1
                                   :damping 1)
                  simulation (p/SpringSimulation spring 0 1 (- unit-velocity))]
              (doto controller
                .clearListeners
                (.addListener #(do
                                 ;(dprn :STD-ani animation)
                                 ;(dprn :STD-anival!!! (.value animation))
                                 (reset! drag-alignment (.value animation))))
                (.animateWith simulation))))]
      (f/nest
        (m/GestureDetector
          :onPanDown (fn [details] (.stop controller)
                       nil)
          :onPanUpdate (fn [^m/DragUpdateDetails details]
                         (dprn :updetails   (/ (-> details .delta .dx) (/ (.width size) 2))
                                            (/ (-> details .delta .dy) (/ (.height size) 2)))
                         (swap! drag-alignment
                           #(.+ (m/Alignment
                                  (/ (-> details .delta .dx) (/ (.width size) 2))
                                  (/ (-> details .delta .dy) (/ (.height size) 2)))
                              %))
                         nil)
          :onPanEnd (fn [^m/DragEndDetails details]
                      (run-animation (-> details .velocity .pixelsPerSecond))
                      nil))
        (m/Align :alignment @drag-alignment)
        m/Card
        child))))

(def physics-card-demo
  (f/widget
    (m/Scaffold
      :appBar (m/AppBar)
      :body (draggable-card :child (m/FlutterLogo :size 128)))))

;(defn main []
;  (m/runApp (m/MaterialApp :home physics-card-demo)))

(defn make-app []
  (m/MaterialApp :home physics-card-demo))