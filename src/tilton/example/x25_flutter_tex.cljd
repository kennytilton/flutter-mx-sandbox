(ns tilton.example.x25-flutter-tex
  (:require
    [clojure.string :as str]
    [tilton.mx.cell.core :refer [cF]]
    [tilton.mx.model.core :refer [mget mset! mswap!] :as md]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app]]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tex/flutter_tex.dart" :as tk]))

;; In this example we simply see pure Flutter widgets -- no f/mx, no cljd/widget -- included
;; in a larger f/mx setting. In the next example we will get fancier and do a LaTeX sandbox.

(def pythag (str "When \\(a \\ne 0 \\), there are two solutions"
              " to \\(ax^2 + bx + c = 0\\):"
              ;; " and they are\n; "
              "$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$$"))

(defn make-app []
  (material-app
    {:title                      "Flutter TeX Demo"
     :debugShowCheckedModeBanner false
     :theme                      (m/ThemeData .primarySwatch
                                   m.Colors/red)}
    (scaffold
      {:appBar (app-bar
                 {:title (m/Text "Flutter TeX Demo")})}
      (center
        (column
          {:mainAxisAlignment m.MainAxisAlignment/spaceEvenly}
          (tk/TeXView
            .child (tk/TeXViewColumn
                     .children
                     [(tk/TeXViewInkWell
                        .id "id_0"
                        .child (tk/TeXViewColumn
                                 .children
                                 [(tk/TeXViewDocument "<h2>MathPaper&trade;</h2>"
                                    .style (tk/TeXViewStyle
                                             .backgroundColor m.Colors/grey
                                             .contentColor m.Colors/white
                                             .textAlign tk.TeXViewTextAlign/center))
                                  ; styling via tk styling:
                                  (tk/TeXViewDocument pythag
                                    .style (tk/TeXViewStyle
                                             .padding (.all tk/TeXViewPadding 10)
                                             .fontStyle (tk/TeXViewFontStyle
                                                          .fontSize 28)
                                             .backgroundColor (-> m/Colors
                                                                .-amber
                                                                .-shade50)
                                             .contentColor m.Colors/black
                                             .textAlign tk.TeXViewTextAlign/left))
                                  ;; similar to preceding, via CSS....
                                  (tk/TeXViewDocument pythag
                                    .style (.fromCSS tk/TeXViewStyle
                                             (str "padding:10px;"
                                               "font-size:28px;"
                                               "color:black;"
                                               "background:beige")))]))])
            .style (tk/TeXViewStyle
                     .elevation 10
                     .borderRadius (.all tk/TeXViewBorderRadius 10)
                     .border (.all tk/TeXViewBorder (tk/TeXViewBorderDecoration
                                                      .borderColor m.Colors/blueGrey
                                                      .borderStyle tk.TeXViewBorderStyle/solid
                                                      .borderWidth 5)))))))))

