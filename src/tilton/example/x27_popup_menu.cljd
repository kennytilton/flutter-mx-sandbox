(ns tilton.example.x27-popup-menu
  (:require
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tilton.mx.base :refer [dprn dp dpx]]
    [tilton.mx.api :refer [cF cI cFn cFonce mpar mget mset! mswap! fasc fmu fm*] :as mx]
    [tilton.fmx.api :refer [as-dart-callback] :as fx]))

(def cg4-languages [{:code "es", :name "Spanish", :translation "Hola, mundo."}
                    {:code "fr", :name "French", :translation "Bonjour, monde."}
                    {:code "de", :name "German", :translation "Hallo, Welt."}
                    {:code "en" :name "English" :translation "Hello, world."}
                    {:code "it", :name "Italian", :translation "Ciao, mondo."}
                    {:code "pt", :name "Portuguese", :translation "Olá, mundo."}
                    {:code "zh-CN", :name "Chinese (Simplified)", :translation "你好，世界。"}
                    {:code "ja", :name "Japanese", :translation "こんにちは、世界。"}
                    {:code "ko", :name "Korean", :translation "안녕하세요, 세상."}
                    {:code "ru", :name "Russian", :translation "Привет, мир."}
                    {:code "ar", :name "Arabic", :translation "مرحباً بالعالم."}])

(defn language-selector-item-builder []
  (cF (fx/as-is
        (fn ^#/(List m/PopupMenuEntry) [ctx]
          (let [^#/(List m/PopupMenuEntry) result
                (mapv (fn [{:keys [code name]}]
                        (m/PopupMenuItem
                          .value code
                          .child (m/Text name
                                   .style (m/TextStyle .fontSize 24))))
                  (mget me :languages))]
            result)))))

(defn popup-decoration-basic []
  (m/BoxDecoration .color
    (.-white m/Colors)
    .borderRadius (.circular m/BorderRadius 5)
    .boxShadow [(m/BoxShadow .color
                  (-> m/Colors .-grey (.withOpacity 0.5))
                  .spreadRadius 2
                  .blurRadius 5
                  .offset (m/Offset 0 3))]))

(defn language-selector []
  (fx/popup-menu-button
    {:initialValue (cFonce (mget me :lang-code))
     :onSelected   (as-dart-callback [item]
                     (mset! me :lang-code item))
     :itemBuilder  (language-selector-item-builder)}
    {:name           :lang-picker
     :languages      (cI cg4-languages)                     ;; allow for growth, but nit utilized this example
     :lang-code      (cI nil #_ "fr") #_(cFn (:code (first (mget me :languages))))
     :lang-preferred (cF (when-let [code (mget me :lang-code)]
                           (some #(when (= code (:code %)) %)
                             (mget me :languages))))}
    (fx/container
      {:decoration (popup-decoration-basic)
       :width      300
       :padding    (.symmetric m/EdgeInsets .vertical 10 .horizontal 15)}
      (fx/row
        (m/Icon (.-arrow_drop_down m/Icons))
        (fx/text {:style (cF (p/TextStyle
                               .color (if-let [lang (mget (fmu :lang-picker) :lang-preferred)]
                                        m.Colors/blue m.Colors/grey)
                               .fontSize 24.0))}
          (if-let [lang (mget (fmu :lang-picker) :lang-preferred)]
            (:name lang)
            "Select language"))))))

(def counter (atom 0))

(defn make-app []
  (fx/material-app
    {:title "Flutter/MX Counter Demo"
     :theme (m/ThemeData .primarySwatch m.Colors/blue)}
    (fx/scaffold
      {:appBar (fx/app-bar
                 {:title (m/Text "Flutter/MX Popup")})}
      (fx/center {}
        {:name  :demo
         :sound (cI nil :ephemeral? true)}
        (fx/column {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
          (language-selector)
          (fx/ignore-pointer
            {:ignoring (cF (nil? (mget (fmu :lang-picker) :lang-preferred)))}
            (fx/text-button
              {:onPressed (as-dart-callback []
                            (dp :knock!!!)
                            (mset! (fasc :demo) :sound
                              :knock-knock #_ [:knock-knock (rand-int 99999)]))}
              (fx/text {:style (cF (p/TextStyle
                                     .color (if (mget (fmu :lang-picker) :lang-preferred)
                                              m.Colors/green m.Colors/red)
                                     .fontSize 24.0))}
                "Knock")))
          (fx/text {:style (p/TextStyle
                             .color m.Colors/black
                             .fontSize 36.0)}
            (if-let [lang (mget (fmu :lang-picker) :lang-preferred)]
              (if (= :knock-knock (do (mget (fasc :demo) :sound)))
                (str (swap! counter inc) ": " (:translation lang))
                "<now click Knock>")
              "<pick ^^^language>")))))))