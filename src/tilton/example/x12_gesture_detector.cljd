(ns tilton.example.x12-gesture-detector
  (:require
    ["package:flutter/gestures.dart" :as g]
    ["package:flutter/material.dart" :as m]
    ["package:vector_math/vector_math_64.dart" :as vm]
    [cljd.flutter.alpha :as f]

    [tilton.mx.base :refer [dprn dp dpx]]
    [tilton.mx.cell.core :as cell :refer [cF cI]]
    [tilton.mx.model.core :refer [mget fmuv] :as md]
    [tilton.fmx.api :as fx]
    [tilton.mx.cell.base :refer [ cinfo] :as cty]))

;; Original: https://github.com/Tensegritics/ClojureDart/tree/main/samples/gesture_detector
;; Copyright 2022 by Tensegritics, Eclipse
;;
;; Little is changed from the CLJD version, except instead of a state atom we:
;;   - make vertices and the drag operation reactive properties of the g/d;
;;   - provide a ChangeNotifier for the :repaint property in the CustomPainter reify;
;;   - in addition to a set-State, we do a notifyListeners when we see an MX widget
;;     with an `fx$notifier` property. This last will need refinement.

(def radius 25)

(defn inside-parallelogram
  [[^m/Offset o ^m/Offset a ^m/Offset b] ^m/Offset mouse-pos]
  (let [oa (.- a o)
        ob (.- b o)
        m (doto
            (vm/Matrix3 (.-dx oa) (.-dy oa) 0
              (.-dx ob) (.-dy ob) 0
              (.-dx o) (.-dy o) 1)
            .invert)
        p-1 (.transform m (vm/Vector3 (.-dx mouse-pos) (.-dy mouse-pos) 1))]
    (when (and (<= 0 (.-x p-1) 1) (<= 0 (.-y p-1) 1))
      (.- mouse-pos o))))

(defn move-to
  [[^m/Offset o ^m/Offset a ^m/Offset b] ^m/Offset o']
  (let [oo' (.- o' o)]
    [o' (.+ a oo') (.+ b oo')]))

(defn gesture-parallelogram []
  (fx/gesture-detector
    {:onPanStart  (cF (fx/->CBAsIs
                        (fn [^g/DragStartDetails details]
                          (let [vertices (mget me :vertices)
                                pointer (.-localPosition details)
                                [id delta] (or
                                             ;; see if a dot has been clicked, perhaps within the parallelogram
                                             ;; _and_ on the dot, since they overlap a bit. Our spec gives
                                             ;; the dot precedence.
                                             (some (fn [[i vertex]]
                                                     (let [delta (.- pointer vertex)]
                                                       (when (< (.-distance delta) radius)
                                                         [i delta])))
                                               (map-indexed vector vertices))
                                             ;; ... not on a dot, now see if in parallelogram
                                             (when-some [delta (inside-parallelogram vertices pointer)]
                                               [:parallelogram delta])
                                             ;; fall thru binding id and delta to nil. The id being nil is key
                                             )]
                            (md/mset! me :drag-op {:dragee id :delta delta})))))
     :onPanUpdate (cF (fx/->CBAsIs
                        (fn [^g/DragUpdateDetails details]
                          (let [{:keys [dragee delta]} (md/mget me :drag-op)
                                new-pos (when delta
                                          (.- (.-localPosition details) delta))]
                            (cond
                              (= dragee :parallelogram)
                              (md/mswap! me :vertices move-to new-pos)
                              (int? dragee)
                              (md/mswap! me :vertices assoc dragee new-pos))))))}
    {:fx$notifier (m/ChangeNotifier)
     :vertices    (cI [(m/Offset 150 150) (m/Offset 250 150) (m/Offset 150 350)])
     :drag-op     (cI {:delta  nil
                       :dragee nil})}
    (m/CustomPaint
      .size (m/Size double/infinity double/infinity)
      .painter (reify :extends (m/CustomPainter .repaint (mget me :fx$notifier))
                 (paint [this canvas size]
                   (let [[^m/Offset o ^m/Offset a ^m/Offset b] (md/mget me :vertices)
                         c (.- (.+ b a) o)
                         paint (doto (m/Paint)
                                 (-> .-color (set! m.Colors/grey))
                                 (-> .-style (set! m.PaintingStyle/fill)))]
                     (doto canvas
                       (.drawLine o a paint)
                       (.drawLine o b paint)
                       (.drawLine b c paint)
                       (.drawLine a c paint)
                       (.drawCircle o radius paint)
                       (.drawCircle a radius paint)
                       (.drawCircle b radius paint))
                     nil))
                 (shouldRepaint [this _] true)))))

(defn make-app []
  (fx/material-app
    {:title "Gesture Demo App"}
    (fx/scaffold
      {:appBar (fx/app-bar {:title (fx/text "Affine XForm Gesture")})}
      (gesture-parallelogram))))
