(ns tilton.example.x05-fab
  (:require
    ["dart:math" :as math]
    [cljd.flutter.alpha :as f]
    [tilton.mx.cell.base :as cbase]
    [tilton.mx.model.peek :refer [Model minfo mref?]]
    [tilton.mx.base :refer [trx dpx dp]]
    [tilton.mx.api :refer [cF cF+ cI mget fmuv fasc] :as mx]
    [tilton.fmx.api :refer [as-dart-callback] :as fx]
    [tilton.fmx.factory :as fmk]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]))

(defn make-app []
  (fx/material-app {:title "Expandable Fab"}
    {:name :mat-app}
    (fx/scaffold
      {:appBar               (fx/app-bar {:title (fx/text "Expandable FAB")})
       :floatingActionButton (expandable-fab
                               :initial-open? false
                               :distance 112.0
                               :actions [{:title "Create Post" :icon (m/Icon m.Icons/format_size)}
                                         {:title "Upload Photo" :icon (m/Icon m.Icons/insert_photo)}
                                         {:title "Upload Video" :icon (m/Icon m.Icons/videocam)}])}
      (fx/list-view+builder
        {:padding     (m.EdgeInsets/symmetric .vertical 8.0)
         :itemCount   25
         :itemBuilder (fx/->CBAsIs
                        (fn [ctx i] (fake-item (odd? i))))}))))

(defn expandable-fab [& {:keys [initial-open? distance actions] :or {initial-open? false}}]
  (fmk/sized-box+expand-ful
    {}                                                      ;; <= necessary placeholder
    {:name             :fab
     ; --- Dart lifecycle ---------------------------
     ;; todo how does this ever run?
     :dispose          (fn [this me]
                         (when-let [controller (fx/my-controller)]
                           (.dispose controller)))
     ; --- animation mechanics ----------------------
     :controller       (cF (fx/when-my-state [state]
                             (m/AnimationController
                               .value (if initial-open? 1.0 0.0)
                               .duration (dart:core/Duration .milliseconds 250)
                               .vsync state)))
     :expand-animation (cF (when-let [c (fx/my-controller)]
                             (m/CurvedAnimation
                               .curve m.Curves/fastOutSlowIn
                               .reverseCurve m.Curves/easeOutQuad
                               .parent c)))
     ; --- behavior -------------------------
     :step             (/ 90.0 (dec (count actions)))
     :open?            (cI initial-open?)
     :ani-dir          (cF+ [:watch (fn [prop-name me new-value prior-value cell]
                                      (when-let [c (fx/my-controller)]
                                        (case new-value
                                          :forward (.forward c)
                                          :reverse (.reverse c))))]
                         (if (mget me :open?)
                           :forward :reverse))}

    (fx/stack
      {:alignment    m.Alignment/bottomRight
       :clipBehavior m.Clip/none}
      {:name :fab-stack}
      (tap-to-close-fab me)
      ;; Matrix always flattens children, and discards nils, so we can offer a collection mid-children
      (when-let [ani (mget (fasc :fab) :expand-animation)]
        (map-indexed
          (fn [i action]
            (expanding-action-button me ani
              :direction-degrees (* i #_ 30.0 (fmuv :fab :step))
              :max-distance distance
              :progress-key :expand-animation
              :action action))
          actions))
      (tap-to-open-fab me))))

(defn expanding-action-button [me anime & {:keys [action direction-degrees max-distance progress-key]}]
  (fx/animated-builder
    {:animation anime                                       ;; (mget (mx/fasc :fab) :expand-animation)
     :builder   (as-dart-callback [ctx child]
                  (let [progress ^m/CurvedAnimation anime #_(mget me :animation) #_(mget (mx/fasc :fab) :expand-animation)
                        offset (m.Offset/fromDirection
                                 (* direction-degrees (/ math/pi 180.00))
                                 (* (.-value progress) max-distance))]
                    ;; N.B! alpha widgets are welcome at leaves of the MX tree...
                    (f/widget
                      (f/nest
                        (m/Positioned
                          .right (+ 4.0 (.-dx offset))
                          .bottom (+ 4.0 (.-dy offset)))
                        (m.Transform/rotate
                          .angle (* (- 1.0 (.-value progress))
                                   math/pi 0.5))
                        child))))}
    {:name :ani-builder}
    (fx/fade-transition
      {:opacity anime #_(mget (mx/fasc :fab) :expand-animation)}
      (action-button
        :icon (:icon action)
        :onPressed (fx/in-my-context [me ctx]
                     (fx/->CBAsIs
                       #(show-action ctx action)))))))

(defn show-action [ctx action]
  (m/showDialog
    .context ctx
    .builder (fn [ctx]
               ;; in this rare case talking directly to Flutter we must
               ;; use fx-render to build a ready-to-go Dart object. This
               ;; could be a macro if this comes up a lot,
               (fx/fx-render ctx
                 (fx/alert-dialog
                   {:actions [(m/TextButton
                                .onPressed #(-> ctx m.Navigator/of .pop)
                                .child (m/Text "CLOSE"))]}
                   {}
                   (fx/text {} {} (:title action)))))))

(defn action-button [& {:keys [onPressed icon]}]
  (fx/material {:shape        (m/CircleBorder)
                :clipBehavior m.Clip/antiAlias
                :color        (fx/in-my-context [me ctx]
                                (-> (m.Theme/of ctx) .-colorScheme .-secondary))
                :elevation    4.0}
    (fx/icon-button
      {:onPressed onPressed
       :icon      icon
       :color     (fx/in-my-context [me ctx]
                    (-> (m.Theme/of ctx) .-colorScheme .-onSecondary))})))

(defn- tap-to-close-fab [par]
  (fx/sized-box {:width  56.0
                 :height 56.0}
    (fx/center
      (fx/material {:shape        (m/CircleBorder)
                    :clipBehavior m.Clip/antiAlias
                    :elevation    4.0}
        (fx/ink-well {:onTap (as-dart-callback []
                               (assert (mref? par :par-close))
                               (let [fb (mx/fasc :fab par)]
                                 (assert (mref? fb :fb-close))
                                 (mx/mswap! fb :open? not)))}
          (fx/padding {:padding (m.EdgeInsets/all 8.0)}
            (fx/icon {:icon  m.Icons/close
                      :color (fx/in-my-context [me ctx]
                               (.-primaryColor (m.Theme/of ctx)))}
              {:name :fabicon-close})))))))

(defn- tap-to-open-fab [par]
  (fx/ignore-pointer
    {:ignoring (cF (mget (mx/fasc :fab par) :open?))}
    (fx/animated-container
      {:transformAlignment m.Alignment/center
       :transform          (cF (if (mget (mx/fasc :fab par) :open?)
                                 (m.Matrix4/diagonal3Values 0.7 0.7 1.0)
                                 (m.Matrix4/diagonal3Values 1.0 1.0 1.0)))
       :duration           (dart:core/Duration .milliseconds 250)
       :curve              (m/Interval 0.0 0.5 .curve m.Curves/easeOut)}
      (fx/animated-opacity
        {:opacity  (cF (if (mget (mx/fasc :fab par) :open?)
                         0.0 1.0))
         :curve    (m/Interval 0.25 1.0 .curve m.Curves/easeInOut)
         :duration (dart:core/Duration .milliseconds 250)}
        (fx/floating-action-button
          {:onPressed (as-dart-callback []
                        (assert (mref? par :par-open))
                        (let [fb (mx/fasc :fab par)]
                          (assert (mref? fb :fb-open))
                          (mx/mswap! fb :open? not)))}
          (fx/icon {:icon m.Icons/create}
            {:name :fabicon-open}))))))

(defn fake-item [is-big?]
  (m/Container
    .margin (m.EdgeInsets/symmetric .vertical 8.0 .horizontal 24.0)
    .height (if is-big? 128.0 36.0)
    .decoration (m/BoxDecoration
                  .borderRadius (m.BorderRadius/all (m.Radius/circular 8.0))
                  .color (.-shade300 m.Colors/cyan))))
