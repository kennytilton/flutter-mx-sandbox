(ns tiltontec.demo.todoMVC.todo
  (:require
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["dart:convert" :as convert]
    ["package:http/http.dart" :as dht]
    ["package:shared_preferences/shared_preferences.dart" :as prefs]
    [clojure.walk :as walk]

    [tiltontec.util.base :refer [dprn dp dpx] :as utb]

    [tiltontec.util.core
     :refer [difference atom? err rmap-setf rmap-meta-setf pln] :as util]
    [tiltontec.cell.matrix :refer [PObserver observe]]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.cell.integrity :as integrity]
    [tiltontec.cell.core :refer [cF cFn cF+ cF_ cI c_F cFonce] :as cells]
    [tiltontec.model.core :refer [mget mpar mkids mname mset!  mswap!] :as md]
    [tiltontec.matrix.api :refer [cFn cF+ cI mget mkids mkids] :as mx]
    [tiltontec.demo.todoMVC.persist :as stg]))

;;; --- handy accessors ---------------------------------

(mx/def-mx-props td-
  stg-id title completed created-at)

;;; --- FX-level to-dos and to-do list -----------------------------------------

(defn ToDo-update [td]
  (let [coll-name (mname (mpar td))]
    (stg/td-rewrite coll-name (select-keys @td [:stg-id :created-at :title :completed]))))

(deftype ToDo []
  :extends cty/Model
  PObserver
  (observe [this prop me new-value prior-value cell]
    ;; the initial observe, signified by prior value unbound,
    ;; is just of the MX to-do being awakened after being loaded
    ;; from the DB, even new to-dos, so no need to update DB,
    (when (and (td-stg-id me) (not= cty/unbound prior-value))
      (ToDo-update me))))

(defn make-ToDo
  ([td-lst title completed]
   (make-ToDo td-lst title completed nil nil))
  ([td-lst title completed stg-id created-at]
   (let [created-at (or created-at
                      (.-millisecondsSinceEpoch (.now DateTime)))]
     (md/make
       :parent td-lst
       :mx-type (ToDo.)
       :stg-id (or stg-id
                 (stg/td-initialize "todo"
                   {:title      title
                    :created-at created-at
                    :completed  completed}))
       :created-at created-at
       :ae-events? (cF+ [:async? true
                         ; optional chance to filter async response before it
                         ; gets set as the mx prop value
                         :and-then? (fn [c lookup]
                                      (= 200 (.-statusCode ^dht/Response lookup)))]
                     (dht/get (.https Uri "api.fda.gov" "drug/event.json"
                                {"limit"  "1"
                                 "search" (str "patient.drug.openfda.brand_name:"
                                            (mget me :title))})))

       ;--
       :title (cI title)
       :completed (cI completed)))))



;;; --- higher level ---------------------------

(deftype ToDoList []
  :extends cty/Model
  PObserver
  (observe [this prop me new-value prior-value cell]
    (case prop
      :kids (when (not= cty/unbound prior-value)
              (let [lost (util/difference (set prior-value) (set new-value))]
                (doseq [td lost]
                  (stg/td-delete "todo" (td-stg-id td)))))
      nil)))

(defn make-ToDoList
  ([name] (make-ToDoList name nil))
  ([name existing-todos]
   (md/make
     :mx-type (ToDoList.)
     :name name
     :kids (cFn (mapv (fn [xtd]
                        (let [{:keys [title completed stg-id created-at]} xtd]
                          (make-ToDo me title completed stg-id created-at)))
                  existing-todos)))))

(defn app-todos [app]
  (when-let [td-lst (tiltontec.model.core/mget app :todo-list)]
    ;; we have to wait for todos to be loaded
    (assert (cty/md-ref? td-lst) (str "app-todos> td-lst not md-ref? " td-lst))
    (md/mkids td-lst)))

