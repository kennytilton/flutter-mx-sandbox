(ns tiltontec.test.evaluate
  (:require
    ["dart:developer" :as dev]
    [tiltontec.util.base :as ub
     :refer [def-rmap-slots  trx dp prog1 *trx?*]]
    [tiltontec.util.core
     :refer [cl-find set-ify atom? err
             make-fifo-queue fifo-empty? fifo-peek fifo-pop
             fifo-data fifo-add rmap-setf]
     :as utc]
    [tiltontec.cell.base
     :refer [without-c-dependency mx-type cells-init
             c-optimized-away? c-formula? c-value c-optimize
             c-unbound? c-input? unbound
             c-model mdead? c-valid? c-useds c-ref? md-ref?
             c-state +pulse+ c-pulse-observed
             *call-stack* *defer-changes*
             c-rule c-me c-value-state c-callers caller-ensure
             c-synapses c-slot-name c-slots
             unlink-from-callers *causation*
             c-synaptic? caller-drop
             c-pulse c-pulse-last-changed c-ephemeral? c-slot
             *depender* *not-to-be*
             *c-prop-depth* md-slot-owning? c-lazy] :as cty]
    [tiltontec.cell.core
     :refer [ make-cell cI cF cFn cFonce cF+ cF+n creset!]]
    [tiltontec.cell.observer
     :refer [fn-obs]]
    [tiltontec.cell.integrity
     :refer [with-integrity data-pulse-next]]
    [tiltontec.cell.evaluate :refer [c-get cget c-value-assume c-awaken
                                     record-dependency ensure-value-is-current]]))

(defn test-input []
  (let [c (cI 42 :slot :bingo)]
    (assert (dart/is? (mx-type c) cty/Cell))
    (assert (c-ref? c))
    (assert (= (c-value-state c) :valid))
    (assert (= #{} (c-callers c)))
    (assert (c-input? c))
    (assert (c-valid? c))
    (assert (nil? (c-model c)))
    (assert (= :bingo (c-slot c) (c-slot-name c)))
    (assert (= (c-get c) 42))
    (dp :test-input-OK)))

(defn t-formula []
  (let [c (cF (+ 40 2))]
    (assert (dart/is? (mx-type c) cty/CellFormula))
    (assert (= (c-value-state c) :unbound))
    (assert (= #{} (c-callers c)))
    (assert (= #{} (c-useds c)))
    (assert (not (c-input? c)))
    (assert (not (c-valid? c)))
    (assert (nil? (c-model c)))
    (trx nil :readddd (c-get c))
    (assert (= (c-get c) 42))
    (dp :t-formula-OK)))

(defn t-formula-2 []
  (let [b (cI 2)
        cct (atom 0)
        dct (atom 0)
        c (cF (swap! cct inc)
            (+ 40 (c-get b)))
        d (cF (swap! dct inc)
            (/ (c-get c)
              (c-get b)))]
    (assert (= (c-get d) 21))
    (assert (= (c-get c) 42))
    (assert (= (c-get b) 2))
    (assert (= 1 @dct))
    (assert (= 1 @cct))
    (assert (= 0 (count (c-useds b))))
    (assert (= 2 (count (c-callers b))))
    (assert (= 1 (count (c-useds c))))
    (assert (= 1 (count (c-callers c))))
    (assert (= 2 (count (c-useds d))))
    (assert (= 0 (count (c-callers d))))

    (dp :t-formula-2-OK)))

(defn t-formula-22 []
  (cells-init)

  (let [b (cI 2 :slot :bb)
        cct (atom 0)
        dct (atom 0)
        c (cF+ [:slot :cc]
            (swap! cct inc)
            (+ 40 (c-get b)))
        d (cF+ [:slot :dd]
            (swap! dct inc)
            (/ (c-get c)
              (c-get b)))]
    (do
      (assert (= (c-get d) 21))
      (assert (= (c-get c) 42))
      (assert (= (c-get b) 2))
      (assert (= 1 @dct))
      (assert (= 1 @cct)))

    (creset! b 3)
    (assert (= (c-get d) 43/3))
    (assert (= (c-get c) 43))
    (assert (= (c-get b) 3))
    (assert (= 2 @dct))
    (assert (= 2 @cct))

    (dp :t-formula-22-OK)
    ))



;;; --- The Pentagram of Death: a hard use case for data integrity ------

(defn pentagram-of-death []
  ;;
  ;; Christened the Pentagram of Death by Phillip J Eby, this
  ;; is the use case that challenges an engine not to calculate
  ;; and observe transiently* inconsistent values when two different
  ;; dependency paths of one slot (here :ee) lead back to
  ;; the same slot (:aa).
  ;;
  ;; * "Transiently" because the state change propagation eventually**
  ;;   gets :ee to the value consistent with the new state.
  ;; ** which is not
  ;;   good enough because observers may have already fired and produced
  ;;   side effects off the invalid state.
  ;;
  ;; The example is contrived but was contrived to replicate
  ;; a real dataflow failure that arose in my RoboCup simulation and
  ;; prompted Cells 3 and the concept of data integrity.
  ;;
  ;; For the telling story behind the useless slot names :aa, :bb et al
  ;; please see: http://smuglispweeny.blogspot.com/2008/07/aa-bb-cc-and-dd.html
  ;;
  (cells-init)
  (dp :pod-entry)
  (let [run (atom {})
        obs (atom {})

        rset (fn []
               (swap! run empty)
               (swap! obs empty))

        logit (fn [log key]
                (swap! run assoc key
                  (inc (key @run 0))))

        logrun #(logit run %)

        cr (fn [c]
             (c-get c))

        podobs (fn [slot me new old c]
                 (swap! obs assoc slot
                   (inc (slot @obs 0))))

        aa (cI 1 :slot :aa :watch podobs)
        a7 (cI 7 :slot :a7 :watch podobs)
        _ (dp :starting-cF+)
        a70 (cF+ [:slot :a70 :watch podobs]
              (logrun :a70)
              (* 10 (cr a7)))
        bb (cF+ [:slot :bb :watch podobs]
             (logrun :bb)
             (cr aa))
        cc (cF+ [:slot :cc :watch podobs]
             (logrun :cc)
             (* 10 (cr aa)))
        dd (cF+ [:slot :dd :watch podobs]
             (logrun :dd)
             (if (even? (cr bb))
               (* 10 (cr cc))
               42))
        ee (cF+ [:slot :ee :watch podobs]
             (logrun :ee)
             (+ (cr a70) (cr bb) (* 10000 (cr dd))))
        verify-p-current (fn []
                           (assert (= 2 (cr aa)))
                           (assert (= 2 (cr bb)))
                           (assert (= 20 (cr cc)))
                           (assert (= 200 (cr dd)))
                           (assert (= 2000072 (cr ee))))
        ]

    ;; next checks are just that the engine calculated well
    ;; and built a good dependency graph
    ;;
    (assert (= 1 (cr aa)))
    (assert (= 1 (cr bb)))
    (assert (= 10 (cr cc)))

    (assert (= 42 (cr dd)))
    (assert (= 420071 (cr ee)))

    (assert (= nil (c-useds aa)))
    (assert (= #{:bb :cc} (c-slots aa :callers)))

    (assert (= #{:aa} (c-slots bb :useds)))
    (assert (= #{:dd :ee} (c-slots bb :callers)))

    (assert (= #{:aa} (c-slots cc :useds)))
    (assert (= #{} (c-slots cc :callers)))

    (assert (= #{:bb} (c-slots dd :useds)))
    (assert (= #{:ee} (c-slots dd :callers)))

    (assert (= #{:a70 :bb :dd} (c-slots ee :useds)))
    (assert (= #{} (c-slots ee :callers)))

    ;; ;; now we come to data integrity: when change happens
    ;; ;; do all and only those cells affected recalculate
    ;; ;; and reobserve and do so exactly once.
    ;; ;;

    (binding [*trx?* true]
      (rset)
      (doseq [[k v] (seq @obs)]
        (trx nil :obschk k v)
        (assert (and (keyword? k)
              (= 0 v))))

      (creset! aa (inc (cr aa)))

      ; check which rules ran
      ;
      (= #{:bb :cc :dd :ee} ;; but not a7
        (set (keys @run)))
      ;
      ; check those rules ran exactly once
      ;
      (doseq [[k v] (seq @run)]
        (trx nil :runchk k v)
        (assert (and (keyword? k)
              (= 1 v))))

      ; check which observers ran
      ;
      (assert (= #{:aa :bb :cc :dd :ee}
        (set (keys @obs))))
      ;
      ; check those observers ran exactly once
      ;
      (doseq [[k v] (seq @obs)]
        (assert (and (keyword? k)
              (= 1 v))))

      ; check that this time dd branched to use cc as well as bb
      ;
      (assert (= #{:bb :cc} (c-slots dd :useds)))

      (verify-p-current)
      (creset! aa (inc (cr aa)))

      ; :aa hence :bb now odd so :dd goes back to 42
      ;
      (assert (= 42 (cr dd)))
      ;
      ; ...and check dependency on :cc got pruned
      ;
      (assert (= #{:bb} (c-slots dd :useds)))
      ))
  (dp :pentagram-of-death-OK))

(defn t-cell-unchanged-test []
  (cells-init)
  (data-pulse-next)

  (let [ob (atom 0)
        b (cI 2 :slot :bb
            :watch (fn-obs
                   (dp :watch-bb!! new old)
                   (swap! ob inc))
            :unchanged-if (fn [n p]
                            (dp :ucif-sees n p)
                            (and (number? n)
                              (number? p)
                              (or (and (even? n)(even? p))
                                (and (odd? n)(odd? p))))))
        _ (c-awaken b)
        _ (dp :b-start @b)
        cct (atom 0)
        c (cF+ [:slot :cc]
            (swap! cct inc)
            (+ 40 (c-get b)))]
    (assert (= (c-get c) 42))
    (assert (= (c-get b) 2))
    (assert (= 1 @ob))
    (assert (= 1 @cct))


    (creset! b 4)
    (assert (= (c-get c) 42))
    (assert (= (c-get b) 4))
    (assert (= 1 @ob))
    (assert (= 1 @cct))

    (creset! b 5)
    (assert (= (c-get c) 45))
    (assert (= (c-get b) 5))
    (assert (= 2 @ob))
    (assert (= 2 @cct)))
  (dp :t-cell-unchanged-test-OK))

(defn opti-away []
  (let [aa (cF 42)]
    (assert (= 42 (c-get aa)))
    (dp :aa @aa)
    (assert (c-optimized-away? aa))
    (assert (= 42 @aa)))
  (dp :opti-away-OK))

(defn run-tests []
  (test-input)
  ;(t-formula)
  ;(t-formula-2)
  ;(t-formula-22)
  ;(pentagram-of-death)
  ;(t-cell-unchanged-test)
  ;(opti-away)
  (dp :test.evaluate-tests-OK))