(ns tiltontec.example.x03-physics-sim
  (:require
    ["package:flutter/widgets.dart"
     :refer [Text State StatefulWidget StatelessWidget] :as w]
    ["package:flutter/physics.dart" :as p]
    ["package:flutter/material.dart" :as m
     :refer [MainAxisAlignment MediaQuery Colors Theme Icon AnimationController Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle Alignment]]
    [tiltontec.matrix.base :refer [dprn dp dpx]]

    [tiltontec.matrix.api :refer [cF cI make mget mpar cFkids fmu fmuv with-mx-isolation] :as mx]
    [tiltontec.flutter-mx.core :as fx]))

(defn logo-recoil [me ctx ^m/Offset px-per-s]
  (let [size (.-size (MediaQuery/of ctx))
        controller (fx/my-controller)
        animation ^#/(m/Animation Alignment) (.drive controller
                                                     (m/AlignmentTween
                                                       .begin (mget me :dragAlignment)
                                                       .end m.Alignment/center))
        units-per-s (m/Offset (/ (.-dx px-per-s) (.-width size))
                              (/ (.-dy px-per-s) (.-height size)))
        unit-velocity (.-distance units-per-s)
        spring (p/SpringDescription
                 .mass 30
                 .stiffness 1
                 .damping 1)
        simulation (p/SpringSimulation spring 0 1 (- unit-velocity))]
    (doto controller
      .clearListeners
      (.addListener #(mx/mset! me :dragAlignment (.-value animation))) ;; <==== dataflow trigger
      (.animateWith simulation))))

(defn draggable-card [& {:keys [drag-child]}]
  (fx/ticker-mode
    {:enabled true}
    (fx/gesture-detector
      {:onPanDown   (cF (fx/->CBAsIs
                          (fn [^m/DragDownDetails details]
                            (when-let [c (fx/my-controller)]
                              (.stop c)))))
       :onPanUpdate (fx/in-my-context [me ctx]
                      (fx/->CBAsIs
                        (fn [^m/DragUpdateDetails details]
                          (let [size (.-size (MediaQuery/of ctx))]
                            (with-mx-isolation
                              (mx/mswap! me :dragAlignment
                                         #(.+ ^m/Alignment %
                                              (m/Alignment
                                                (/ (-> details .-delta .-dx) (/ (.-width size) 2))
                                                (/ (-> details .-delta .-dy) (/ (.-height size) 2))))))))))
       :onPanEnd    (cF (fx/in-my-context [me ctx]
                          (fx/->CBAsIs
                            (fn [^m/DragEndDetails details]
                              (logo-recoil me ctx (-> details .-velocity .-pixelsPerSecond))))))}
      {:name          :draggo
       :dragAlignment (cI m.Alignment/center)
       :controller    (cF (when-let [st (mget (mpar) :fx$state)]
                            ;; todo search up for (dart/is? <state> w/TickerProvider)
                            (m/AnimationController .vsync st)))
       :dispose       (fn [this me]
                        ;; todo test that this is being called
                        (when-let [con (fx/my-controller)]
                          (dp :x03-disposing!!! con)
                          (.dispose con)))}
      (fx/align
        {:alignment (cF (mx/mdv! :draggo :dragAlignment))}
        (fx/card drag-child)))))

(defn make-app []
  (let [title (str "Physics Animation")]
    (fx/material-app {:title title}
                     (fx/scaffold
                       {:appBar (fx/app-bar {:title (fx/text title)})}
                       (draggable-card
                         :drag-child (fx/flutter-logo {:size 128.0} {}))))))