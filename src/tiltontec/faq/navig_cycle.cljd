(ns tiltontec.faq.navig-cycle
  (:require
    ["dart:async" :as async]
    [clojure.string :as str]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI]]
    [tiltontec.cell.observer :refer [fn-obs]]
    [tiltontec.model.core :refer [mget mset! mswap! fm* fmu fasc] :as md]
    [tiltontec.flutter-mx.core :refer [as-dart-callback] :as fx]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]))

(def the-second-coming
  ;; with apologies to William Butler Yeats, we need a duplicate word sequence to make a point
  (str/split (str "Turning Turning in the widening gyre"
               " The falcon cannot hear the falconer;"
               " Things fall apart; the centre cannot hold;"
               " Mere anarchy is loosed upon the world.") #" "))

(defn make-app-fail []
  ;;
  ;; NB! THIS VERSION NO LONGER FAILS ON LAUNCH!!!!!!!!!!!!!!
  ;;
  ;; This version failed before because the various FMU ("search family up") calls lead to criss-crossing,
  ;; nested evaluation of implicit KIDS formulae, and we get MX_COMPUTE_CYCLE_DETECTED.
  ;;
  ;; Now that widgets text and text! no longer have fake kids for their string content, there is mush
  ;; less navigation going on.
  ;;
  (fx/material-app
    {:title "Flutter/MX Stream Demo"
     :theme (m/ThemeData .primarySwatch m.Colors/blue)}
    (fx/scaffold
      {:appBar (fx/app-bar
                 {:title (m/Text "Reactive Streams Demo")})
       :floatingActionButton
       (cF (fx/floating-action-button
             {;; flutter attributes, reactive where useful
              :onPressed (as-dart-callback []
                           (mswap! me :offset #(if % (inc %) 0)))
              :tooltip   "Send next word of message, looping at end"
              }
             {:name       :msg-sender
              :offset     (cI nil)
              :next-word  (cF+ [:ephemeral? true
                                :watch (fn [_ me new-word _ _]
                                         (when new-word
                                           (.add (.-sink ^#/(async/StreamController String) (mget me :msg-stream))
                                             new-word)))]
                            (when-let [offset (mget me :offset)]
                              (nth the-second-coming (mod offset (count the-second-coming)))))
              :msg-stream (new #/(async/StreamController String))
              }
             (m/Icon m.Icons/chat .color
               (if (mget me :offset)
                 m.Colors/white
                 m.Colors/yellow))))}
      (fx/center
        (fx/column
          {:mainAxisAlignment m.MainAxisAlignment/center}
          (fx/text
            {:style (p/TextStyle .color m.Colors/blue .fontSize 18.0)}
            {:name      :poem
             :full-text (cF (concat
                              (if (= _cache cty/unbound) [] _cache)
                              [(mget (fmu :msg-recipient) :msg-rcvd)]))}
            (str/join " " (remove #{"<none>"} (mget me :full-text))))

          (fx/text {:style (p/TextStyle .color m.Colors/black
                             .fontSize 36.0)}
            {:name :banner}
            (str "Message " (or (mget (fmu :msg-recipient) :msg-ct) "not") " received:"))

          (fx/text!
            {:style (fx/in-my-context [me ctx]
                      (.-headline3 (.-textTheme (m.Theme/of ctx))))}
            {:name       :msg-recipient
             :msg-source (cF+ [:watch (fn [_ me ^#/(async/StreamController String) new-source old-source _]
                                        (.listen (.-stream ^#/(async/StreamController String) new-source)
                                          (fn [^String msg]
                                            (mset! me :msg-rcvd msg))))]
                           (mget (fm* :msg-sender) :msg-stream))

             :msg-rcvd   (cI "<none>" :ephemeral? true)

             :msg-ct     (cF (when-let [msg (mget me :msg-rcvd)]
                               (when-not (or (str/blank? msg)
                                           (= msg "<none>"))
                                 (if _cache (inc _cache) 1))))}
            (mget me :msg-rcvd)))))))

;;; --- the fix -----------------------------------------------------------

(defn make-app-fixed []
  (fx/material-app
    {:title "Flutter/MX Stream Demo"
     :theme (m/ThemeData .primarySwatch m.Colors/blue)}
    {:name :mat-app}
    (fx/scaffold
      {:appBar (fx/app-bar {:title (m/Text "DeadEnd Explorer")})
       :floatingActionButton
       (cF (fx/floating-action-button
             {:onPressed (as-dart-callback []
                           (mswap! me :offset #(if % (inc %) 0)))
              :tooltip   "Send next word of message, looping at end"}
             {:name       :msg-sender
              :offset     (cI nil)
              :next-word  (cF+ [:ephemeral? true
                                :watch (fn [_ me new-word _ _]
                                         (when new-word
                                           (.add (.-sink ^#/(async/StreamController String) (mget me :msg-stream))
                                             new-word)))]
                            (when-let [offset (mget me :offset)]
                              (nth the-second-coming (mod offset (count the-second-coming)))))
              :msg-stream (new #/(async/StreamController String))}
             (m/Icon m.Icons/chat .color
               (if (mget me :offset)
                 m.Colors/white
                 m.Colors/red))))}
      (fx/center {}
        (fx/column
          {:mainAxisAlignment m.MainAxisAlignment/center}
          {:name       :msg-recipient
           ;;
           ;; the solution is to move the :msg-rcvd property, for which several formulae look, up to where
           ;; a straight ascendant search can find it, following the non-dynamic parent chain.
           ;;
           ;; By contrast, the FM-NAVIG utility runs around the parent/kids tree looking everywhere,
           ;; potentially kicking of KIDS formulae to JIT compute more of the matrix. This blind search
           ;; more easily leads to a cycle, by looking places it need not look. But!
           ;;
           ;; Blind search is huge for the D/X: it means we can code without worrying about
           ;; specifying where to find things. When the simple coding cycles, we do have to think
           ;; about how we can guide the search. For one thing, FMU usually avoids a lot of trouble.
           ;;
           ;; NB! This example arose because we tried aping HTML in which the text content of what seems
           ;; like a leaf P or LABEL is actually a child. But because those are so common, and because
           ;; we so often like to customize those, this property->child treatment exponentially increased
           ;; the risk of cycling. We have already experimented with losing the property->child thing, and
           ;; will be making that change shortly. When we do that, the "fail" app will no longer fail.
           ;;
           :msg-source (cF+ [:watch (fn [_ me ^#/(async/StreamController String) new-source old-source _]
                                      (.listen (.-stream ^#/(async/StreamController String) new-source)
                                        (fn [^String msg]
                                          (mset! me :msg-rcvd msg))))]
                         (mget (fm* :msg-sender) :msg-stream))
           :msg-rcvd   (cI "<none>" :ephemeral? true)
           :msg-ct     (cF (when-let [msg (mget me :msg-rcvd)]
                             (when-not (or (str/blank? msg)
                                         (= msg "<none>"))
                               (if _cache (inc _cache) 1))))}

          (fx/text {:style (p/TextStyle .color m.Colors/blue .fontSize 18.0)}
            {:name      :poem
             :full-text (cF (let [msg (mget (fasc :msg-recipient) :msg-rcvd)]
                              (when (not= msg "<none>")
                                (concat (if (= _cache cty/unbound) [] _cache)
                                  [msg]))))}
            (if (seq (mget me :full-text))
              (str/join " " (mget me :full-text))
              "nada"))

          (fx/text {:style (p/TextStyle .color m.Colors/black
                             .fontSize 36.0)}
            {:name :banner}
            (str "Message " (or (mget (fasc :msg-recipient) :msg-ct) "not") " received:"))
          (fx/text!
            {:style (fx/in-my-context [me ctx]
                      (.-headline3 (.-textTheme (m.Theme/of ctx))))}
            (mget (fasc :msg-recipient) :msg-rcvd)))))))